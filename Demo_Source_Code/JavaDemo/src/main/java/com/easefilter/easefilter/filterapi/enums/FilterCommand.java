package com.easefilter.easefilter.filterapi.enums;

/**
 * Values for {@link com.easefilter.easefilter.filterapi.structs.MESSAGE_SEND_DATA#FilterCommand}.
 *
 * Note that values from {@code 0x20001} and onwards are under the {@code IOName} struct in the C++ demo.
 */
public enum FilterCommand implements NumericEnumULong {
    MESSAGE_TYPE_RESTORE_BLOCK_OR_FILE(0x00000001),
    MESSAGE_TYPE_RESTORE_FILE_TO_ORIGINAL_FOLDER(0x00000002),
    MESSAGE_TYPE_GET_FILE_LIST(0x00000004),
    MESSAGE_TYPE_RESTORE_FILE_TO_CACHE(0x00000008),
    MESSAGE_TYPE_SEND_EVENT_NOTIFICATION(0x00000010),
    MESSAGE_TYPE_DELETE_FILE(0x00000020),
    MESSAGE_TYPE_RENAME_FILE(0x00000040),
    MESSAGE_TYPE_SEND_MESSAGE_FILENAME(0x00000080),
    FILTER_SEND_FILE_CHANGED_EVENT(0x00010001),
    FILTER_REQUEST_USER_PERMIT(0x00010002),
    FILTER_REQUEST_ENCRYPTION_KEY(0x00010003),
    FILTER_REQUEST_ENCRYPTION_IV_AND_KEY(0x00010004),
    FILTER_REQUEST_ENCRYPTION_IV_AND_KEY_AND_ACCESSFLAG(0x00010005),
    FILTER_REQUEST_ENCRYPTION_IV_AND_KEY_AND_TAGDATA(0x00010006),
    FILTER_SEND_REG_CALLBACK_INFO(0x00010007),
    FILTER_SEND_PROCESS_CREATION_INFO(0x00010008),
    FILTER_SEND_PROCESS_TERMINATION_INFO(0x00010009),
    FILTER_SEND_THREAD_CREATION_INFO(0x0001000A),
    FILTER_SEND_THREAD_TERMINATION_INFO(0x0001000B),
    FILTER_SEND_PROCESS_HANDLE_INFO(0x0001000C),
    FILTER_SEND_THREAD_HANDLE_INFO(0x0001000D),
    FILTER_SEND_ATTACHED_VOLUME_INFO(0x0001000E),
    FILTER_SEND_DETACHED_VOLUME_INFO(0x0001000F),
    FILTER_SEND_DENIED_FILE_IO_EVENT(0x00010010),
    FILTER_SEND_DENIED_VOLUME_DISMOUNT_EVENT(0x00010011),
    FILTER_SEND_DENIED_PROCESS_EVENT(0x00010012),
    FILTER_SEND_DENIED_REGISTRY_ACCESS_EVENT(0x00010013),
    FILTER_SEND_DENIED_PROCESS_TERMINATED_EVENT(0x00010014),
    FILTER_SEND_DENIED_USB_READ_EVENT(0x00010015),
    FILTER_SEND_DENIED_USB_WRITE_EVENT(0x00010016),
    FILTER_SEND_PRE_TERMINATE_PROCESS_INFO(0x00010017),
    FILTER_SEND_LOAD_IMAGE_NOTIFICATION(0x00010018),
    FILTER_NO_ENCRYPT_FILE_OPEN_WITH_TAG(0x00010021),
    FILTER_REPARSE_FILE_CREATE_REQUEST(0x00010022),
    FILTER_REPARSE_FILE_OPEN_REQUEST(0x00010023),

    IOPreFileCreate(0x00020001),
    IOPostFileCreate(0x00020002),
    IOPreFileRead(0x00020003),
    IOPostFileRead(0x00020004),
    IOPreFileWrite(0x00020005),
    IOPostFileWrite(0x00020006),
    IOPreQueryFileSize(0x00020007),
    IOPostQueryFileSize(0x00020008),
    IOPreQueryFileBasicInfo(0x00020009),
    IOPostQueryFileBasicInfo(0x0002000a),
    IOPreQueryFileStandardInfo(0x0002000b),
    IOPostQueryFileStandardInfo(0x0002000c),
    IOPreQueryFileNetworkInfo(0x0002000d),
    IOPostQueryFileNetworkInfo(0x0002000e),
    IOPreQueryFileId(0x0002000f),
    IOPostQueryFileId(0x00020010),
    IOPreQueryFileInfo(0x00020011),
    IOPostQueryFileInfo(0x00020012),
    IOPreSetFileSize(0x00020013),
    IOPostSetFileSize(0x00020014),
    IOPreSetFileBasicInfo(0x00020015),
    IOPostSetFileBasicInfo(0x00020015),
    IOPreSetFileStandardInfo(0x00020017),
    IOPostSetFileStandardInfo(0x00020018),
    IOPreSetFileNetworkInfo(0x00020019),
    IOPostSetFileNetworkInfo(0x0002001a),
    IOPreMoveOrRenameFile(0x0002001b),
    IOPostMoveOrRenameFile(0x0002001c),
    IOPreDeleteFile(0x0002001d),
    IOPostDeleteFile(0x0002001e),
    IOPreSetFileInfo(0x0002001f),
    IOPostSetFileInfo(0x00020020),
    IOPreQueryDirectoryFile(0x00020021),
    IOPostQueryDirectoryFile(0x00020022),
    IOPreQueryFileSecurity(0x00020023),
    IOPostQueryFileSecurity(0x00020024),
    IOPreSetFileSecurity(0x00020025),
    IOPostSetFileSecurity(0x00020026),
    IOPreFileHandleClose(0x00020027),
    IOPostFileHandleClose(0x00020028),
    IOPreFileClose(0x00020029),
    IOPostFileClose(0x0002002a),

    ;
    private final int numeric;

    FilterCommand(int numeric) {
        this.numeric = numeric;
    }

    public int getNumeric() {
        return numeric;
    }
}
